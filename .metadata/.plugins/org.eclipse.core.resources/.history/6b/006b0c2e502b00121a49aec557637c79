package com.j3ltd.web;

import java.net.UnknownHostException;

import com.mongodb.BasicDBObject;
import com.mongodb.DB;
import com.mongodb.DBCollection;
import com.mongodb.DBCursor;
import com.mongodb.Mongo;
import com.mongodb.MongoException;

import com.j3ltd.common.*;
import com.j3ltd.server.sessionremote.*;
import com.j3ltd.server.entities.*;
import com.j3ltd.server.exceptions.*;
import com.j3ltd.web.messages.*;
import java.util.*;

import javax.faces.context.*;
import javax.faces.application.*;
import javax.faces.model.SelectItem;
import javax.naming.Context;
import javax.naming.InitialContext;


public class App {
	public static void main(String[] args) {

		try {
			// connect to mongoDB, ip and port number
			Mongo mongo = new Mongo("localhost", 27017);

			// get database from MongoDB,
			// if database doesn't exists, mongoDB will create it automatically
			DB db = mongo.getDB("yourdb");

			// Get collection from MongoDB, database named "yourDB"
			// if collection doesn't exists, mongoDB will create it
			// automatically
			DBCollection collection = db.getCollection("yourCollection");

			// create a document to store key and value
			BasicDBObject document = new BasicDBObject();
			document.put("id", 1001);
			document.put("msg", "hello world mongoDB in Java");

			// save it into collection named "yourCollection"
			collection.insert(document);

			// search query
			BasicDBObject searchQuery = new BasicDBObject();
			searchQuery.put("id", 1001);

			// query it
			DBCursor cursor = collection.find(searchQuery);

			// loop over the cursor and print it retrieved result
			while (cursor.hasNext()) {
				System.out.println(cursor.next());
			}

			System.out.println("Done");
			
		} catch (UnknownHostException e) {
			e.printStackTrace();
		} catch (MongoException e) {
			e.printStackTrace();
		}

	}
}

public class Register {

	Person person;
	private String passwordConfirm;
	private String emailConfirm;

	public Person getPerson() {
		return person;
	}

	public void setPerson(Person person) {
		this.person = person;
	}

	public String getgenders() {
		String genders = new String();
		MessageFactory msg = new MessageFactory();
			
		SelectItem item = new SelectItem();		
		item.setLabel(msg.getMessage("male"));
		item.setValue(Genders.Male.toString());
		/*genders.add(item);
		item = new SelectItem();
		item.setLabel(msg.getMessage("female"));
		item.setValue(Genders.Female.toString());
		genders.add(item);
		item = new SelectItem();
		item.setLabel(msg.getMessage("undisclosed"));
		item.setValue(Genders.Undisclosed.toString());
		genders.add(item);*/
		return genders;
	}
	
	public List<SelectItem> getMaritalStati() {
		ArrayList<SelectItem> maritalStati = new ArrayList<SelectItem>();
		MessageFactory msg = new MessageFactory();
		
		SelectItem item = new SelectItem();		
		item.setLabel(msg.getMessage("married"));
		item.setValue(MaritalStatus.Married.toString());
		maritalStati.add(item);
		item = new SelectItem();
		item.setLabel(msg.getMessage("single"));
		item.setValue(MaritalStatus.Single.toString());
		maritalStati.add(item);
		item = new SelectItem();
		item.setLabel(msg.getMessage("undisclosed"));
		item.setValue(MaritalStatus.Undisclosed.toString());
		maritalStati.add(item);
		return maritalStati; 
	}
	
	public String register() throws Exception {
		String toReturn = "failure";
		   
		if (validateData()) {
			try {
				// save locale information, in case the user chose a language on the welcome page
				Locale locale = FacesContext.getCurrentInstance().getViewRoot().getLocale();
				person.setLocaleCountry(locale.getCountry());
				person.setLocaleLanguage(locale.getLanguage());
				
				Context context = new InitialContext();
				EntityFacade entities = (EntityFacade) context.lookup("EntityFacadeBean/remote");
				person = entities.createPerson(person);
				toReturn = "success";
			} 
			catch (PersonEntityExistsException exist) {
				MessageFactory msg = new MessageFactory();
				FacesContext ctx = FacesContext.getCurrentInstance();
				
				ctx.addMessage("registerForm:email", 
						new FacesMessage(FacesMessage.SEVERITY_ERROR, 
								msg.getMessage("errorEmailExists"), null));
			}					
		}
		return toReturn;
	}
	
	private boolean validateData() {
		boolean toReturn = true;
		MessageFactory msg = new MessageFactory();
		FacesContext ctx = FacesContext.getCurrentInstance();
		
		// check emailConfirm is same as email
		if (!emailConfirm.equals(person.getEmail())) {
			ctx.addMessage("registerForm:emailConfirm", 
					new FacesMessage(FacesMessage.SEVERITY_ERROR, 
							msg.getMessage("errorEmailConfirm"), null));
			toReturn = false;
		}
		// check passwordConfirm is same as password
		if (!passwordConfirm.equals(person.getPassword())) {
			ctx.addMessage("registerForm:passwordConfirm", 
					new FacesMessage(FacesMessage.SEVERITY_ERROR, 
							msg.getMessage("errorPasswordConfirm"), null));
			toReturn = false;
		}
		return toReturn;
	}
	
	public String getEmailConfirm() {
		return emailConfirm;
	}

	public void setEmailConfirm(String emailConfirm) {
		this.emailConfirm = emailConfirm;
	}

	public String getPasswordConfirm() {
		return passwordConfirm;
	}

	public void setPasswordConfirm(String passwordConfirm) {
		this.passwordConfirm = passwordConfirm;
	}
}
